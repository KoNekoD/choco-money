# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:

services:
  # default configuration for services in *this* file
  _defaults:
    autowire: true      # Automatically injects dependencies in your services.
    autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

  # makes classes in src/ available to be used as services
  # this creates a service per class whose id is the fully-qualified class name
  App\:
    resource: '../src/'

  _instanceof:
    App\Shared\Application\Command\CommandHandlerInterface:
      tags:
        - { name: messenger.message_handler, bus: command.bus }

    App\Shared\Application\Query\QueryHandlerInterface:
      tags:
        - { name: messenger.message_handler, bus: query.bus }

    App\Shared\Domain\Event\EventHandlerInterface:
      tags:
        - { name: messenger.message_handler, bus: event.bus }

    App\Shared\Infrastructure\Doctrine\DomainEventSubscriber:
      tags: [ { name: 'doctrine.event_subscriber' } ]

    App\Shared\Application\EventListener\ExceptionListener:
      tags:
        - { name: kernel.event_listener, event: kernel.exception }

  App\CurrencyExchange\Infrastructure\CurrencyAPI\MoneroClient:
    arguments: {
      $httpClient: '@http_client',
      $walletHost: '%env(resolve:MONERO_WALLET_HOST)%',
      $walletPort: '%env(resolve:MONERO_WALLET_PORT)%',
      $protocol: 'http',
      $user: null,
      $password: null
    }
    tags:
      - { name: 'choco.currency_api' }

  App\CurrencyExchange\Infrastructure\CurrencyAPI\BitcoinClient:
    arguments: {
      $httpClient: '@http_client',
      $walletHost: '%env(resolve:BITCOIN_WALLET_HOST)%',
      $walletPort: '%env(resolve:BITCOIN_WALLET_PORT)%',
      $protocol: 'http',
      $user: 'choco',
      $password: 'choco'
    }
    tags:
      - { name: 'choco.currency_api' }

#  App\CurrencyExchange\Infrastructure\CurrencyAPI\:
#    resource: '../src/CurrencyExchange/Infrastructure/CurrencyAPI/'
#    exclude:
#      - '../src/CurrencyExchange/Infrastructure/CurrencyAPI/**/*Structure.php'
#      - '../src/CurrencyExchange/Infrastructure/CurrencyAPI/**/lib/*.php'
#    tags:
#      - { name: 'choco.currency_api' }

  # Use now #[TaggedIterator('choco.currency_api', defaultIndexMethod: 'getCurrencyAdapterName')] in service
  App\CurrencyExchange\Infrastructure\Provider\CurrencyApiProvider:
    arguments:
      - !tagged_iterator { tag: 'choco.currency_api', default_index_method: getCurrencyAdapterName }

  #    Controllers
  App\CurrencyExchange\Infrastructure\Controller\:
    resource: '../src/CurrencyExchange/Infrastructure/Controller'
    tags: [ 'controller.service_arguments' ]

  # add more service definitions when explicit configuration is needed
  # please note that last definitions always *replace* previous ones
