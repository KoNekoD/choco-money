/* tslint:disable */
/* eslint-disable */
/**
 * Choco Money
 * This is an awesome app!
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import {Configuration} from './configuration';
import globalAxios, {AxiosInstance, AxiosPromise} from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  BaseAPI,
  COLLECTION_FORMATS,
  RequestArgs,
  RequiredError
} from './base';

/**
 *
 * @export
 * @interface CancelTransferRequestDTO
 */
export interface CancelTransferRequestDTO {
    /**
     *
     * @type {string}
     * @memberof CancelTransferRequestDTO
     */
    reason?: string;
}
/**
 *
 * @export
 * @interface CreateTransferRequestDTO
 */
export interface CreateTransferRequestDTO {
    /**
     *
     * @type {string}
     * @memberof CreateTransferRequestDTO
     */
    baseAsset?: string;
    /**
     *
     * @type {string}
     * @memberof CreateTransferRequestDTO
     */
    quoteAsset?: string;
    /**
     *
     * @type {string}
     * @memberof CreateTransferRequestDTO
     */
    leadBaseWalletAddress?: string;
    /**
     *
     * @type {string}
     * @memberof CreateTransferRequestDTO
     */
    leadQuoteWalletAddress?: string;
    /**
     *
     * @type {number}
     * @memberof CreateTransferRequestDTO
     */
    leadBaseExchangeAmount?: number;
    /**
     *
     * @type {string}
     * @memberof CreateTransferRequestDTO
     */
    leadEmail?: string;
}
/**
 *
 * @export
 * @interface CurrencyDTO
 */
export interface CurrencyDTO {
    /**
     *
     * @type {string}
     * @memberof CurrencyDTO
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof CurrencyDTO
     */
    asset?: string;
}
/**
 *
 * @export
 * @interface CurrencyExchangeSnapshotDTO
 */
export interface CurrencyExchangeSnapshotDTO {
    /**
     *
     * @type {string}
     * @memberof CurrencyExchangeSnapshotDTO
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof CurrencyExchangeSnapshotDTO
     */
    baseAsset?: string;
    /**
     *
     * @type {string}
     * @memberof CurrencyExchangeSnapshotDTO
     */
    quoteAsset?: string;
    /**
     *
     * @type {number}
     * @memberof CurrencyExchangeSnapshotDTO
     */
    price?: number;
}
/**
 *
 * @export
 * @enum {string}
 */
export enum DelayedTransferStatusEnum {
    Pending = 'pending',
    Cancelled = 'cancelled',
    Overdue = 'overdue',
    MoneyReceived = 'money_received',
    MutualMoneySent = 'mutual_money_sent',
    Exchanged = 'exchanged'
}

/**
 *
 * @export
 * @interface TransferDTO
 */
export interface TransferDTO {
    /**
     *
     * @type {string}
     * @memberof TransferDTO
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof TransferDTO
     */
    baseAsset?: string;
    /**
     *
     * @type {string}
     * @memberof TransferDTO
     */
    quoteAsset?: string;
    /**
     *
     * @type {string}
     * @memberof TransferDTO
     */
    expiresAt?: string;
    /**
     *
     * @type {number}
     * @memberof TransferDTO
     */
    leadBaseExchangeAmount?: number;
    /**
     *
     * @type {string}
     * @memberof TransferDTO
     */
    exchangerBaseWalletAddress?: string;
}

/**
 * CurrencyExchangeApi - axios parameter creator
 * @export
 */
export const CurrencyExchangeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} baseAsset
         * @param {string} quoteAsset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiGetCurrencyExchangeSnapshot: async (baseAsset: string, quoteAsset: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseAsset' is not null or undefined
            if (baseAsset === null || baseAsset === undefined) {
                throw new RequiredError('baseAsset','Required parameter baseAsset was null or undefined when calling getApiGetCurrencyExchangeSnapshot.');
            }
            // verify required parameter 'quoteAsset' is not null or undefined
            if (quoteAsset === null || quoteAsset === undefined) {
                throw new RequiredError('quoteAsset','Required parameter quoteAsset was null or undefined when calling getApiGetCurrencyExchangeSnapshot.');
            }
            const localVarPath = `/api/currency/exchange/snapshots/lastByAssets/{baseAsset}/{quoteAsset}`
                .replace(`{${"baseAsset"}}`, encodeURIComponent(String(baseAsset)))
                .replace(`{${"quoteAsset"}}`, encodeURIComponent(String(quoteAsset)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} transferId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiTransferGet: async (transferId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transferId' is not null or undefined
            if (transferId === null || transferId === undefined) {
                throw new RequiredError('transferId','Required parameter transferId was null or undefined when calling getApiTransferGet.');
            }
            const localVarPath = `/api/transfers/{transferId}/status`
                .replace(`{${"transferId"}}`, encodeURIComponent(String(transferId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrenciesList: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/currencies/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} transferId
         * @param {CancelTransferRequestDTO} [cancelTransferRequestDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiTransferCancel: async (transferId: string, cancelTransferRequestDTO?: CancelTransferRequestDTO, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transferId' is not null or undefined
            if (transferId === null || transferId === undefined) {
                throw new RequiredError('transferId','Required parameter transferId was null or undefined when calling postApiTransferCancel.');
            }
            const localVarPath = `/api/transfers/{transferId}/cancel`
                .replace(`{${"transferId"}}`, encodeURIComponent(String(transferId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof cancelTransferRequestDTO !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(cancelTransferRequestDTO !== undefined ? cancelTransferRequestDTO : {})
                : (cancelTransferRequestDTO || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {CreateTransferRequestDTO} [createTransferRequestDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiTransferCreate: async (createTransferRequestDTO?: CreateTransferRequestDTO, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/transfers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof createTransferRequestDTO !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(createTransferRequestDTO !== undefined ? createTransferRequestDTO : {})
                : (createTransferRequestDTO || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CurrencyExchangeApi - functional programming interface
 * @export
 */
export const CurrencyExchangeApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} baseAsset
         * @param {string} quoteAsset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiGetCurrencyExchangeSnapshot(baseAsset: string, quoteAsset: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CurrencyExchangeSnapshotDTO>> {
            const localVarAxiosArgs = await CurrencyExchangeApiAxiosParamCreator(configuration).getApiGetCurrencyExchangeSnapshot(baseAsset, quoteAsset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} transferId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiTransferGet(transferId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DelayedTransferStatusEnum>> {
            const localVarAxiosArgs = await CurrencyExchangeApiAxiosParamCreator(configuration).getApiTransferGet(transferId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrenciesList(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CurrencyDTO>>> {
            const localVarAxiosArgs = await CurrencyExchangeApiAxiosParamCreator(configuration).getCurrenciesList(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} transferId
         * @param {CancelTransferRequestDTO} [cancelTransferRequestDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiTransferCancel(transferId: string, cancelTransferRequestDTO?: CancelTransferRequestDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await CurrencyExchangeApiAxiosParamCreator(configuration).postApiTransferCancel(transferId, cancelTransferRequestDTO, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {CreateTransferRequestDTO} [createTransferRequestDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiTransferCreate(createTransferRequestDTO?: CreateTransferRequestDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferDTO>> {
            const localVarAxiosArgs = await CurrencyExchangeApiAxiosParamCreator(configuration).postApiTransferCreate(createTransferRequestDTO, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CurrencyExchangeApi - factory interface
 * @export
 */
export const CurrencyExchangeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @param {string} baseAsset
         * @param {string} quoteAsset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiGetCurrencyExchangeSnapshot(baseAsset: string, quoteAsset: string, options?: any): AxiosPromise<CurrencyExchangeSnapshotDTO> {
            return CurrencyExchangeApiFp(configuration).getApiGetCurrencyExchangeSnapshot(baseAsset, quoteAsset, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} transferId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiTransferGet(transferId: string, options?: any): AxiosPromise<DelayedTransferStatusEnum> {
            return CurrencyExchangeApiFp(configuration).getApiTransferGet(transferId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrenciesList(options?: any): AxiosPromise<Array<CurrencyDTO>> {
            return CurrencyExchangeApiFp(configuration).getCurrenciesList(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} transferId
         * @param {CancelTransferRequestDTO} [cancelTransferRequestDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiTransferCancel(transferId: string, cancelTransferRequestDTO?: CancelTransferRequestDTO, options?: any): AxiosPromise<void> {
            return CurrencyExchangeApiFp(configuration).postApiTransferCancel(transferId, cancelTransferRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {CreateTransferRequestDTO} [createTransferRequestDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiTransferCreate(createTransferRequestDTO?: CreateTransferRequestDTO, options?: any): AxiosPromise<TransferDTO> {
            return CurrencyExchangeApiFp(configuration).postApiTransferCreate(createTransferRequestDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CurrencyExchangeApi - object-oriented interface
 * @export
 * @class CurrencyExchangeApi
 * @extends {BaseAPI}
 */
export class CurrencyExchangeApi extends BaseAPI {
    /**
     *
     * @param {string} baseAsset
     * @param {string} quoteAsset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrencyExchangeApi
     */
    public getApiGetCurrencyExchangeSnapshot(baseAsset: string, quoteAsset: string, options?: any) {
        return CurrencyExchangeApiFp(this.configuration).getApiGetCurrencyExchangeSnapshot(baseAsset, quoteAsset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {string} transferId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrencyExchangeApi
     */
    public getApiTransferGet(transferId: string, options?: any) {
        return CurrencyExchangeApiFp(this.configuration).getApiTransferGet(transferId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrencyExchangeApi
     */
    public getCurrenciesList(options?: any) {
        return CurrencyExchangeApiFp(this.configuration).getCurrenciesList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {string} transferId
     * @param {CancelTransferRequestDTO} [cancelTransferRequestDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrencyExchangeApi
     */
    public postApiTransferCancel(transferId: string, cancelTransferRequestDTO?: CancelTransferRequestDTO, options?: any) {
        return CurrencyExchangeApiFp(this.configuration).postApiTransferCancel(transferId, cancelTransferRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {CreateTransferRequestDTO} [createTransferRequestDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrencyExchangeApi
     */
    public postApiTransferCreate(createTransferRequestDTO?: CreateTransferRequestDTO, options?: any) {
        return CurrencyExchangeApiFp(this.configuration).postApiTransferCreate(createTransferRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDocJsonGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/doc.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDocJsonGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).apiDocJsonGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDocJsonGet(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).apiDocJsonGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiDocJsonGet(options?: any) {
        return DefaultApiFp(this.configuration).apiDocJsonGet(options).then((request) => request(this.axios, this.basePath));
    }
}


